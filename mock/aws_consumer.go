// Code generated by MockGen. DO NOT EDIT.
// Source: ../aws_consumer.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	auth "token_authorizer"

	sts "github.com/aws/aws-sdk-go/service/sts"
	gomock "github.com/golang/mock/gomock"
)

// MockAwsConsumerInterface is a mock of AwsConsumerInterface interface.
type MockAwsConsumerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAwsConsumerInterfaceMockRecorder
}

// MockAwsConsumerInterfaceMockRecorder is the mock recorder for MockAwsConsumerInterface.
type MockAwsConsumerInterfaceMockRecorder struct {
	mock *MockAwsConsumerInterface
}

// NewMockAwsConsumerInterface creates a new mock instance.
func NewMockAwsConsumerInterface(ctrl *gomock.Controller) *MockAwsConsumerInterface {
	mock := &MockAwsConsumerInterface{ctrl: ctrl}
	mock.recorder = &MockAwsConsumerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAwsConsumerInterface) EXPECT() *MockAwsConsumerInterfaceMockRecorder {
	return m.recorder
}

// AssumeRole mocks base method.
func (m *MockAwsConsumerInterface) AssumeRole(rule *auth.Rule, name string) (*sts.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeRole", rule, name)
	ret0, _ := ret[0].(*sts.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeRole indicates an expected call of AssumeRole.
func (mr *MockAwsConsumerInterfaceMockRecorder) AssumeRole(rule, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeRole", reflect.TypeOf((*MockAwsConsumerInterface)(nil).AssumeRole), rule, name)
}

// ReadConfiguration mocks base method.
func (m *MockAwsConsumerInterface) ReadConfiguration(config *auth.Config, bucket, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfiguration", config, bucket, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadConfiguration indicates an expected call of ReadConfiguration.
func (mr *MockAwsConsumerInterfaceMockRecorder) ReadConfiguration(config, bucket, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfiguration", reflect.TypeOf((*MockAwsConsumerInterface)(nil).ReadConfiguration), config, bucket, key)
}

// ValidateRole mocks base method.
func (m *MockAwsConsumerInterface) ValidateRole(role string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRole", role)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateRole indicates an expected call of ValidateRole.
func (mr *MockAwsConsumerInterfaceMockRecorder) ValidateRole(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRole", reflect.TypeOf((*MockAwsConsumerInterface)(nil).ValidateRole), role)
}
