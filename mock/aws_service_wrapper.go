// Code generated by MockGen. DO NOT EDIT.
// Source: ../aws_service_wrapper.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	iam "github.com/aws/aws-sdk-go/service/iam"
	sts "github.com/aws/aws-sdk-go/service/sts"
	gomock "github.com/golang/mock/gomock"
)

// MockAwsServiceWrapperInterface is a mock of AwsServiceWrapperInterface interface.
type MockAwsServiceWrapperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAwsServiceWrapperInterfaceMockRecorder
}

// MockAwsServiceWrapperInterfaceMockRecorder is the mock recorder for MockAwsServiceWrapperInterface.
type MockAwsServiceWrapperInterfaceMockRecorder struct {
	mock *MockAwsServiceWrapperInterface
}

// NewMockAwsServiceWrapperInterface creates a new mock instance.
func NewMockAwsServiceWrapperInterface(ctrl *gomock.Controller) *MockAwsServiceWrapperInterface {
	mock := &MockAwsServiceWrapperInterface{ctrl: ctrl}
	mock.recorder = &MockAwsServiceWrapperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAwsServiceWrapperInterface) EXPECT() *MockAwsServiceWrapperInterfaceMockRecorder {
	return m.recorder
}

// AssumeRole mocks base method.
func (m *MockAwsServiceWrapperInterface) AssumeRole(input *sts.AssumeRoleInput) (*sts.AssumeRoleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeRole", input)
	ret0, _ := ret[0].(*sts.AssumeRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeRole indicates an expected call of AssumeRole.
func (mr *MockAwsServiceWrapperInterfaceMockRecorder) AssumeRole(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeRole", reflect.TypeOf((*MockAwsServiceWrapperInterface)(nil).AssumeRole), input)
}

// GetRole mocks base method.
func (m *MockAwsServiceWrapperInterface) GetRole(input *iam.GetRoleInput) (*iam.GetRoleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", input)
	ret0, _ := ret[0].(*iam.GetRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockAwsServiceWrapperInterfaceMockRecorder) GetRole(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockAwsServiceWrapperInterface)(nil).GetRole), input)
}

// GetS3Object mocks base method.
func (m *MockAwsServiceWrapperInterface) GetS3Object(bucket, key string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetS3Object", bucket, key)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetS3Object indicates an expected call of GetS3Object.
func (mr *MockAwsServiceWrapperInterfaceMockRecorder) GetS3Object(bucket, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetS3Object", reflect.TypeOf((*MockAwsServiceWrapperInterface)(nil).GetS3Object), bucket, key)
}
